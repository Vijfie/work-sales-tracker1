<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Work Hours & Sales Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 700;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            padding: 25px;
            border-radius: 15px;
            color: white;
            text-align: center;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            transform: translateY(0);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .tabs {
            display: flex;
            margin-bottom: 30px;
            background: #f8f9fa;
            border-radius: 15px;
            padding: 5px;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            color: #6c757d;
            transition: all 0.3s ease;
        }

        .tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .entry-list {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            max-height: 400px;
            overflow-y: auto;
        }

        .entry-item {
            background: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .entry-info {
            flex: 1;
        }

        .entry-date {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .entry-details {
            font-weight: 600;
            color: #2c3e50;
        }

        .entry-amount {
            font-size: 1.2em;
            font-weight: bold;
            color: #28a745;
        }

        .delete-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .delete-btn:hover {
            background: #c82333;
            transform: scale(1.05);
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 20px;
            }
            
            h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä Work Hours & Sales Tracker</h1>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" id="totalHours">0</div>
                <div class="stat-label">Total Hours</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalSales">$0</div>
                <div class="stat-label">Total Sales</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="avgHourlyRate">$0</div>
                <div class="stat-label">Avg Hourly Rate</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="thisWeekHours">0</div>
                <div class="stat-label">This Week Hours</div>
            </div>
        </div>

        <div class="tabs">
            <button class="tab active" onclick="switchTab('hours')">‚è∞ Hours</button>
            <button class="tab" onclick="switchTab('sales')">üí∞ Sales</button>
        </div>

        <div id="hoursTab" class="tab-content active">
            <h2 style="margin-bottom: 20px; color: #2c3e50;">Log Work Hours</h2>
            <form id="hoursForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="workDate">Date</label>
                        <input type="date" id="workDate" required>
                    </div>
                    <div class="form-group">
                        <label for="hoursWorked">Hours Worked</label>
                        <input type="number" id="hoursWorked" step="0.25" min="0" max="24" placeholder="8.5" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="workDescription">Work Description</label>
                    <textarea id="workDescription" rows="3" placeholder="Describe what you worked on..."></textarea>
                </div>
                <button type="submit" class="btn">Add Hours Entry</button>
            </form>
            
            <div class="entry-list" id="hoursEntries">
                <div class="empty-state">No hours logged yet. Start tracking your work!</div>
            </div>
        </div>

        <div id="salesTab" class="tab-content">
            <h2 style="margin-bottom: 20px; color: #2c3e50;">Log Sales</h2>
            <form id="salesForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="saleDate">Date</label>
                        <input type="date" id="saleDate" required>
                    </div>
                    <div class="form-group">
                        <label for="saleAmount">Sale Amount ($)</label>
                        <input type="number" id="saleAmount" step="0.01" min="0" placeholder="150.00" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="customerName">Customer Name</label>
                        <input type="text" id="customerName" placeholder="John Doe">
                    </div>
                    <div class="form-group">
                        <label for="saleType">Sale Type</label>
                        <select id="saleType">
                            <option value="Product">Product</option>
                            <option value="Service">Service</option>
                            <option value="Commission">Commission</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="saleNotes">Notes</label>
                    <textarea id="saleNotes" rows="3" placeholder="Additional details about the sale..."></textarea>
                </div>
                <button type="submit" class="btn">Add Sales Entry</button>
            </form>
            
            <div class="entry-list" id="salesEntries">
                <div class="empty-state">No sales recorded yet. Start tracking your revenue!</div>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let hoursData = [];
        let salesData = [];

        // Load data from memory on page load
        window.addEventListener('load', function() {
            loadData();
            updateStats();
            setDefaultDates();
        });

        function setDefaultDates() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('workDate').value = today;
            document.getElementById('saleDate').value = today;
        }

        function loadData() {
            // In a real GitHub Pages deployment, you'd load from a JSON file
            // For now, we'll start with empty arrays
            renderHoursEntries();
            renderSalesEntries();
        }

        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            
            document.querySelector(`[onclick="switchTab('${tab}')"]`).classList.add('active');
            document.getElementById(tab + 'Tab').classList.add('active');
        }

        // Hours form handling
        document.getElementById('hoursForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const entry = {
                id: Date.now(),
                date: document.getElementById('workDate').value,
                hours: parseFloat(document.getElementById('hoursWorked').value),
                description: document.getElementById('workDescription').value
            };
            
            hoursData.push(entry);
            renderHoursEntries();
            updateStats();
            this.reset();
            setDefaultDates();
        });

        // Sales form handling
        document.getElementById('salesForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const entry = {
                id: Date.now(),
                date: document.getElementById('saleDate').value,
                amount: parseFloat(document.getElementById('saleAmount').value),
                customer: document.getElementById('customerName').value,
                type: document.getElementById('saleType').value,
                notes: document.getElementById('saleNotes').value
            };
            
            salesData.push(entry);
            renderSalesEntries();
            updateStats();
            this.reset();
            setDefaultDates();
        });

        function renderHoursEntries() {
            const container = document.getElementById('hoursEntries');
            
            if (hoursData.length === 0) {
                container.innerHTML = '<div class="empty-state">No hours logged yet. Start tracking your work!</div>';
                return;
            }
            
            const sortedData = [...hoursData].sort((a, b) => new Date(b.date) - new Date(a.date));
            
            container.innerHTML = sortedData.map(entry => `
                <div class="entry-item">
                    <div class="entry-info">
                        <div class="entry-date">${formatDate(entry.date)}</div>
                        <div class="entry-details">
                            ${entry.hours} hours ${entry.description ? '- ' + entry.description : ''}
                        </div>
                    </div>
                    <div class="entry-amount">${entry.hours}h</div>
                    <button class="delete-btn" onclick="deleteHoursEntry(${entry.id})">√ó</button>
                </div>
            `).join('');
        }

        function renderSalesEntries() {
            const container = document.getElementById('salesEntries');
            
            if (salesData.length === 0) {
                container.innerHTML = '<div class="empty-state">No sales recorded yet. Start tracking your revenue!</div>';
                return;
            }
            
            const sortedData = [...salesData].sort((a, b) => new Date(b.date) - new Date(a.date));
            
            container.innerHTML = sortedData.map(entry => `
                <div class="entry-item">
                    <div class="entry-info">
                        <div class="entry-date">${formatDate(entry.date)}</div>
                        <div class="entry-details">
                            ${entry.type} ${entry.customer ? '- ' + entry.customer : ''}
                            ${entry.notes ? '<br><small>' + entry.notes + '</small>' : ''}
                        </div>
                    </div>
                    <div class="entry-amount">$${entry.amount.toFixed(2)}</div>
                    <button class="delete-btn" onclick="deleteSalesEntry(${entry.id})">√ó</button>
                </div>
            `).join('');
        }

        function deleteHoursEntry(id) {
            hoursData = hoursData.filter(entry => entry.id !== id);
            renderHoursEntries();
            updateStats();
        }

        function deleteSalesEntry(id) {
            salesData = salesData.filter(entry => entry.id !== id);
            renderSalesEntries();
            updateStats();
        }

        function updateStats() {
            const totalHours = hoursData.reduce((sum, entry) => sum + entry.hours, 0);
            const totalSales = salesData.reduce((sum, entry) => sum + entry.amount, 0);
            const avgHourlyRate = totalHours > 0 ? totalSales / totalHours : 0;
            
            // Calculate this week's hours
            const today = new Date();
            const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
            const thisWeekHours = hoursData
                .filter(entry => new Date(entry.date) >= startOfWeek)
                .reduce((sum, entry) => sum + entry.hours, 0);
            
            document.getElementById('totalHours').textContent = totalHours.toFixed(1);
            document.getElementById('totalSales').textContent = `$${totalSales.toFixed(2)}`;
            document.getElementById('avgHourlyRate').textContent = `$${avgHourlyRate.toFixed(2)}`;
            document.getElementById('thisWeekHours').textContent = thisWeekHours.toFixed(1);
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }
    </script>
</body>
</html>